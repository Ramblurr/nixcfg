#!/usr/bin/env bash
set -u
shopt -s nullglob

SKIP_CONFIRMATION=false
declare -a CEPH_WIPE_PATHS

while [[ $# -gt 0 ]]; do
    case $1 in
        --danger-danger-destroy)
        SKIP_CONFIRMATION=true
        shift
        ;;
        --ceph-wipe)
        CEPH_WIPE_PATHS+=("$2")
        shift # Remove argument name
        shift # Remove argument value
        ;;
        *) # Unknown option
        shift # Remove generic argument
        ;;
    esac
done

if [ "$SKIP_CONFIRMATION" != true ]; then
  echo "DANGER DANGER!"
  echo
  echo "Will destroy: k3s, containerd, openebs."
  echo "will also destroy disks:"
  for DISKPATH in "${CEPH_WIPE_PATHS[@]}"; do
    if [ -n "$DISKPATH" ]; then
      echo "  $DISKPATH"
    fi
  done
  echo
  echo "Type 'destroy' to continue:"
  read input
  if [ "$input" != "destroy" ]; then
    echo "Operation aborted. You did not type 'destroy'."
    exit 1
  fi
fi



echo "Stopping k3s and containerd"
systemctl stop k3s containerd
if systemctl list-units --full -all | grep -Fq 'cilium-bootstrap.service'; then
  systemctl stop cilium-bootstrap.service
fi

pschildren() {
    ps -e -o ppid= -o pid= | \
    sed -e 's/^\s*//g; s/\s\s*/\t/g;' | \
    grep -w "^$1" | \
    cut -f2
}

pstree() {
    for pid in $@; do
        echo $pid
        for child in $(pschildren $pid); do
            pstree $child
        done
    done
}

killtree() {
    kill -9 $(
        { set +x; } 2>/dev/null;
        pstree $@;
        set -x;
    ) 2>/dev/null
}


getshims() {
    ps -e -o pid= -o args= | sed -e 's/^ *//; s/\s\s*/\t/;' | grep -w 'k3s/data/[^/]*/bin/containerd-shim' | cut -f1
}

killtree $({ set +x; } 2>/dev/null; getshims; set -x)

do_unmount_and_remove() {
    set +x
    while read -r _ path _; do
        case "$path" in $1*) echo "$path" ;; esac
    done < /proc/self/mounts | sort -r | xargs -r -t -n 1 sh -c 'umount -f "$0" && rm -rf "$0"'
    set -x
}

ip netns show 2>/dev/null | grep cni- | xargs -r -t -n 1 ip netns delete
ip link delete cilium_net


systemctl reset-failed
systemctl disable k3s containerd
systemctl daemon-reload

echo "Killing all containers"
find /sys/fs/cgroup/system.slice/containerd.service* -name cgroup.procs -print0 | xargs -0 -r cat | xargs -r kill -9
find /sys/fs/cgroup/kubepods* -name cgroup.procs -print0 | xargs -0 -r cat | xargs -r kill -9
sleep 1
#killall -9 containerd-shim-runc-v2
sleep 1
echo "Removing mounts"
mount | awk '/\/var\/lib\/kubelet|\/run\/k3s|\/run\/netns|\/run\/containerd/ {print $3}' | xargs -r umount


do_unmount_and_remove '/run/k3s'
do_unmount_and_remove '/var/lib/rancher/k3s'
do_unmount_and_remove '/var/lib/kubelet/pods'
do_unmount_and_remove '/var/lib/kubelet/plugins'
do_unmount_and_remove '/run/netns/cni-'


echo "Destroying containerd zfs dataset"
zfs destroy -R rpool/encrypted/containerd

sleep 1

echo "Wiping all data directories"
rm -rf /var/lib/kubelet/* /var/lib/rancher/* /var/lib/containerd/* /etc/rancher/* /run/containerd/* /var/lib/cni/* /var/openebs/* /run/k3s /run/containerd

set +e
for DISKPATH in "${CEPH_WIPE_PATHS[@]}"; do
    if [ -n "$DISKPATH" ]; then
        echo "Wiping disk $DISKPATH"
        LSBLK_JSON=$(lsblk -J -o NAME,TYPE $DISKPATH)
        LVM_VOL="/dev/mapper/$(echo "$LSBLK_JSON" |jq -r '.blockdevices[].children[0].name')"
        DM_VOL=/dev/mapper/$(echo "$LSBLK_JSON" |jq -r '.blockdevices[].children[0].children[0].name')
        cryptsetup close "$DM_VOL"
        lvchange -an "$LVM_VOL"
        rm "$LVM_VOL"
        sgdisk --zap-all $DISKPATH
        dd if=/dev/zero of="$DISKPATH" bs=1M count=100 oflag=direct,dsync
        blkdiscard $DISKPATH
    fi
done

echo "Done"
exit 0
