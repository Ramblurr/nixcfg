---
version: "3"

vars:
  LOCAL_HOST: quine

tasks:
  default:
    silent: true
    cmds:
      - task -l

  check:
    cmds:
      - nix flake check --all-systems

  update:
    desc: Update all the flake inputs
    cmds:
      - nix flake update

  update:input:
    desc: Update a specific flake input (e.g., task update:input input=nixpkgs)
    vars:
      input: '{{ or .input (fail "Flake input name `input` is required") }}'
    cmds:
      - nix flake update {{.input}}

  nixos-rebuild-remote:
    internal: true
    cmds:
      - nixos-rebuild --fast --use-remote-sudo --build-host {{.BUILD_HOST}} --target-host {{.TARGET_HOST}} --flake {{.FLAKE_URI}} {{.ACTION}} |& nom

  nixos-rebuild-local:
    internal: true
    cmds:
      - |
        if [[ "{{ .TARGET_HOST }}" == "{{ .LOCAL_HOST }}" ]]; then
          sudo nixos-rebuild --flake .#quine {{.ACTION}} --show-trace  |& nom
        else
          nixos-rebuild --fast --use-remote-sudo  --target-host {{.TARGET_HOST}} --flake {{.FLAKE_URI}} {{.ACTION}} --show-trace |& nom
        fi

  deploy-key:
    cmds:
      - sops -d --extract "['ssh_host_ed25519_key']" ./hosts/unstable/{{.arch}}-linux/{{.host}}/secrets.sops.yaml | ssh {{.host}} 'cat - | sudo tee  /etc/ssh/ssh_host_ed25519_key'
      - sops -d --extract "['ssh_host_ed25519_key_pub']" ./hosts/unstable/{{.arch}}-linux/{{.host}}/secrets.sops.yaml | ssh {{.host}} 'cat - | sudo tee /etc/ssh/ssh_host_ed25519_key.pub'

  build:
    desc: Build a configuration for a remote
    summary: |
      host: the hostname to build (required)
      flake: the flake name if different from host (optional)
    requires:
      vars: ["host"]
    #silent: true
    cmds:
      - task: nixos-rebuild-local
        vars:
          ACTION: build
          TARGET_HOST: "{{.host}}"
          FLAKE_URI: .#{{.flake | default "{{.host}}"}}

  switch:
    desc: Switch a configuration for a remote
    summary: |
      host: the hostname to build (required)
      flake: the flake name if different from host (optional)
    requires:
      vars: ["host"]
    #silent: true
    cmds:
      - task: nixos-rebuild-local
        vars:
          ACTION: switch
          TARGET_HOST: "{{.host}}"
          FLAKE_URI: .#{{.flake | default "{{.host}}"}}

  test:
    desc: Test a configuration for a remote
    summary: |
      host: the hostname to build (required)
      flake: the flake name if different from host (optional)
    requires:
      vars: ["host"]
    #silent: true
    cmds:
      - task: nixos-rebuild-local
        vars:
          ACTION: test
          TARGET_HOST: "{{.host}}"
          FLAKE_URI: .#{{.flake | default "{{.host}}"}}

  switch-remote:
    desc: Switch a configuration for a remote
    summary: |
      host: the hostname to build (required)
      flake: the flake name if different from host (optional)
    requires:
      vars: ["host"]
    #silent: true
    cmds:
      - task: nixos-rebuild-remote
        vars:
          ACTION: switch
          BUILD_HOST: "{{.host}}"
          TARGET_HOST: "{{.host}}"
          FLAKE_URI: .#{{.flake | default "{{.host}}"}}

  image:
    desc: Build the SD Card image for a host
    summary: |
      host: the hostname to build (required)
    requires:
      vars: ["host"]
    cmds:
      - nix build .#images.{{.host}}

  why-depends:
    # source: https://discourse.nixos.org/t/better-why-depends-fill-in-the-gaps/31246/8
    desc: Explain why a NixOS host's configuration depends on some package
    summary: |
      host: the NixOs host's system closure to check
      pkg: the pkg name to investigate
    requires:
      vars: ["host", "pkg"]
    cmds:
      - nix why-depends .\#nixosConfigurations.{{.host}}.config.system.build.toplevel .\#nixosConfigurations.{{.host}}.pkgs.{{.pkg}} --derivation | cat

  gen-host:
    desc: Scaffold out a gen host
    cmds:
      - python ./scripts/gen-host.py

  switch:vm:
    desc: Update a microvm
    summary: |
      guest: the guest to build (required)
    requires:
      vars: ["guest"]
    cmds:
      - nix run .#nixosConfigurations.{{.guest}}.config.microvm.deploy.rebuild root@dewey {{.guest}}.svc.socozy.casa

  switch:vms:
    desc: Update all microvms
    vars:
      GUESTS:
        sh: find guests -maxdepth 1 -type d -printf "%P "
    cmds:
      - for:
          var: GUESTS
        cmd: nix run .#nixosConfigurations.{{.ITEM}}.config.microvm.deploy.rebuild root@dewey {{.ITEM}}.svc.socozy.casa
